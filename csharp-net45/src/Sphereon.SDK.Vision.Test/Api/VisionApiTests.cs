/* 
 * Vision
 *
 * Sphereon Vision APIs
 *
 * OpenAPI spec version: 0.2
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Threading;
using Sphereon.SDK.Vision.Client;
using Sphereon.SDK.Vision.Api;
using Sphereon.SDK.Vision.Model;

namespace Sphereon.SDK.Vision.Test
{
    /// <summary>
    ///  Class for testing VisionApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class VisionApiTests
    {
        private VisionApi instance;
        private Boolean isLocal = true;
        private static VisionJob visionJob;
        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            if (isLocal)
            {
                instance = new VisionApi("http://127.0.0.1:18100");
            }
            else
            {
                instance = new VisionApi();
            }

            instance.Configuration.AccessToken = Environment.GetEnvironmentVariable("SPHEREON_TEST_ACCESSTOKEN");
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
            
        }

        /// <summary>
        /// Test an instance of VisionApi
        /// </summary>
        [Test, Order(0)]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' VisionApi
            Assert.IsInstanceOf(typeof(VisionApi), instance, "instance is a VisionApi");
        }

        
        /// <summary>
        /// Test CreateVisionJob
        /// </summary>
        [Test, Order(1)]
        public void CreateVisionJobTest()
        {
            VisionSettings visionSettings = new VisionSettings();
            visionSettings.Vendor = VisionSettings.VendorEnum.GOOGLEVISION;
            List<VisionSettings.DetectionTypesEnum> detectionTypes = new List<VisionSettings.DetectionTypesEnum>();
            detectionTypes.Add(VisionSettings.DetectionTypesEnum.LABEL);
            visionSettings.DetectionTypes = detectionTypes;
            visionSettings.StorageProvider = VisionSettings.StorageProviderEnum.SUPPLIER;

            visionJob = instance.CreateVisionJob(visionSettings);
            Assert.IsInstanceOf<VisionJob> (visionJob, "response is VisionJob");
            Assert.AreEqual("UPLOADRESOURCES", visionJob.State.ToString());
        }

        /// <summary>
        /// Test UploadFile
        /// </summary>
        [Test, Order(2)]
        public void UploadFileTest()
        {
            // TODO change path to project specific
            string jobId = visionJob.JobId;
            //string fileName = "label-dog.jpg";
            //string path = Path.Combine(Environment.CurrentDirectory, @"Data\", fileName);
            Stream stream = new FileStream("C:/Users/Gabriel/IdeaProjects/vision-sdk/csharp-net45/Resources/label-dog.jpg", FileMode.Open);
            var response = instance.UploadFile(jobId, stream);
            Assert.IsInstanceOf<InputResource>(response, "response is InputResource");
            Assert.AreEqual("label-dog.jpg", response.StreamLocation.OriginalFilename);
        }

        /// <summary>
        /// Test SubmitVisionJob
        /// </summary>
        [Test, Order(3)]
        public void SubmitVisionJobTest()
        {
            string jobId = visionJob.JobId;
            VisionSettings settings = visionJob.Settings;
            var response = instance.SubmitVisionJob(jobId, settings);
            Assert.IsInstanceOf<VisionJob>(response, "response is VisionJob");
            Assert.AreEqual("PROCESSING", response.State.ToString());
        }
        
        /// <summary>
        /// Test GetVisionJob
        /// </summary>
        [Test, Order(4)]
        public void GetVisionJobTest()
        {
            var delay = 1;
            string jobId = visionJob.JobId;
            var response = instance.GetVisionJob(jobId);

            var listener = Task.Factory.StartNew(() =>
            {
                while (true)
                {
                    Thread.Sleep(delay);
                    if (response.State.ToString().Equals("DONE"))
                    {
                        break;
                    }
                    response = instance.GetVisionJob(jobId);
                }
            });

            listener.Wait();
           
            Assert.IsInstanceOf<VisionJob> (response, "response is VisionJob");
            Assert.AreEqual("DONE", response.State.ToString());
            List<KeyValuePair<string, Result>> resultList = response.Results.ToList();
            
            Assert.AreEqual("a", response.Results.Values.GE);
        }

        /// <summary>
        /// Test DeleteVisionJob
        /// </summary>
        [Test, Order(5)]
        public void DeleteVisionJobTest()
        {
            string jobId = visionJob.JobId;
            var response = instance.DeleteVisionJob(jobId);
            Assert.IsInstanceOf<VisionJob> (response, "response is VisionJob");
            Assert.AreEqual("DELETED", response.State.ToString());
        }

    }

}
