/* 
 * Vision
 *
 * Sphereon Vision APIs
 *
 * OpenAPI spec version: 0.2
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Sphereon.SDK.Vision.Client;
using Sphereon.SDK.Vision.Api;
using Sphereon.SDK.Vision.Model;

namespace Sphereon.SDK.Vision.Test
{
    /// <summary>
    ///  Class for testing VisionApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class VisionApiTests
    {
        private VisionApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new VisionApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
            
        }

        /// <summary>
        /// Test an instance of VisionApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' VisionApi
            Assert.IsInstanceOfType(typeof(VisionApi), instance, "instance is a VisionApi");
        }

        
        /// <summary>
        /// Test CreateVisionJob
        /// </summary>
        [Test]
        public void CreateVisionJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            VisionSettings visionSettings = new VisionSettings();
            var response = instance.CreateVisionJob(visionSettings);
            Assert.IsInstanceOf<VisionJob> (response, "response is VisionJob");
        }
        
        /// <summary>
        /// Test DeleteVisionJob
        /// </summary>
        [Test]
        public void DeleteVisionJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobId = null;
            //var response = instance.DeleteVisionJob(jobId);
            //Assert.IsInstanceOf<VisionJob> (response, "response is VisionJob");
        }
        
        /// <summary>
        /// Test GetVisionJob
        /// </summary>
        [Test]
        public void GetVisionJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobId = null;
            //var response = instance.GetVisionJob(jobId);
            //Assert.IsInstanceOf<VisionJob> (response, "response is VisionJob");
        }
        
        /// <summary>
        /// Test SubmitVisionJob
        /// </summary>
        [Test]
        public void SubmitVisionJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobId = null;
            //VisionSettings settings = null;
            //var response = instance.SubmitVisionJob(jobId, settings);
            //Assert.IsInstanceOf<VisionJob> (response, "response is VisionJob");
        }
        
        /// <summary>
        /// Test UploadFile
        /// </summary>
        [Test]
        public void UploadFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobId = null;
            //System.IO.Stream stream = null;
            //var response = instance.UploadFile(jobId, stream);
            //Assert.IsInstanceOf<InputResource> (response, "response is InputResource");
        }
        
    }

}
