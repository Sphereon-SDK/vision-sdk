/* 
 * Vision
 *
 * Sphereon Vision APIs
 *
 * OpenAPI spec version: 0.2
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.Vision.Client.SwaggerDateConverter;

namespace Sphereon.SDK.Vision.Model
{
    /// <summary>
    /// StorageSettings
    /// </summary>
    [DataContract]
    public partial class StorageSettings :  IEquatable<StorageSettings>, IValidatableObject
    {
        /// <summary>
        /// The backend type that is used to store files.
        /// </summary>
        /// <value>The backend type that is used to store files.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BackendTypeEnum
        {
            
            /// <summary>
            /// Enum SPHEREONCLOUDSTORAGE for value: SPHEREON_CLOUD_STORAGE
            /// </summary>
            [EnumMember(Value = "SPHEREON_CLOUD_STORAGE")]
            SPHEREONCLOUDSTORAGE = 1,
            
            /// <summary>
            /// Enum AMAZONS3 for value: AMAZON_S3
            /// </summary>
            [EnumMember(Value = "AMAZON_S3")]
            AMAZONS3 = 2,
            
            /// <summary>
            /// Enum MSAZUREBLOBSTORAGE for value: MS_AZURE_BLOB_STORAGE
            /// </summary>
            [EnumMember(Value = "MS_AZURE_BLOB_STORAGE")]
            MSAZUREBLOBSTORAGE = 3,
            
            /// <summary>
            /// Enum GOOGLECLOUDSTORAGE for value: GOOGLE_CLOUD_STORAGE
            /// </summary>
            [EnumMember(Value = "GOOGLE_CLOUD_STORAGE")]
            GOOGLECLOUDSTORAGE = 4,
            
            /// <summary>
            /// Enum XILLIOENGINE for value: XILLIO_ENGINE
            /// </summary>
            [EnumMember(Value = "XILLIO_ENGINE")]
            XILLIOENGINE = 5
        }

        /// <summary>
        /// The backend type that is used to store files.
        /// </summary>
        /// <value>The backend type that is used to store files.</value>
        [DataMember(Name="backendType", EmitDefaultValue=false)]
        public BackendTypeEnum? BackendType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageSettings" /> class.
        /// </summary>
        /// <param name="Container">The container id or name in which the files are stored..</param>
        /// <param name="Lifecycle">The lifecycle of the stored files..</param>
        /// <param name="Credentials">The credentials from the backed..</param>
        /// <param name="BackendType">The backend type that is used to store files..</param>
        /// <param name="Backend">The backend id or name that is used to store files..</param>
        public StorageSettings(string Container = default(string), Lifecycle Lifecycle = default(Lifecycle), Credentials Credentials = default(Credentials), BackendTypeEnum? BackendType = default(BackendTypeEnum?), string Backend = default(string))
        {
            this.Container = Container;
            this.Lifecycle = Lifecycle;
            this.Credentials = Credentials;
            this.BackendType = BackendType;
            this.Backend = Backend;
        }
        
        /// <summary>
        /// The container id or name in which the files are stored.
        /// </summary>
        /// <value>The container id or name in which the files are stored.</value>
        [DataMember(Name="container", EmitDefaultValue=false)]
        public string Container { get; set; }

        /// <summary>
        /// The lifecycle of the stored files.
        /// </summary>
        /// <value>The lifecycle of the stored files.</value>
        [DataMember(Name="lifecycle", EmitDefaultValue=false)]
        public Lifecycle Lifecycle { get; set; }

        /// <summary>
        /// The credentials from the backed.
        /// </summary>
        /// <value>The credentials from the backed.</value>
        [DataMember(Name="credentials", EmitDefaultValue=false)]
        public Credentials Credentials { get; set; }


        /// <summary>
        /// The backend id or name that is used to store files.
        /// </summary>
        /// <value>The backend id or name that is used to store files.</value>
        [DataMember(Name="backend", EmitDefaultValue=false)]
        public string Backend { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StorageSettings {\n");
            sb.Append("  Container: ").Append(Container).Append("\n");
            sb.Append("  Lifecycle: ").Append(Lifecycle).Append("\n");
            sb.Append("  Credentials: ").Append(Credentials).Append("\n");
            sb.Append("  BackendType: ").Append(BackendType).Append("\n");
            sb.Append("  Backend: ").Append(Backend).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StorageSettings);
        }

        /// <summary>
        /// Returns true if StorageSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of StorageSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Container == input.Container ||
                    (this.Container != null &&
                    this.Container.Equals(input.Container))
                ) && 
                (
                    this.Lifecycle == input.Lifecycle ||
                    (this.Lifecycle != null &&
                    this.Lifecycle.Equals(input.Lifecycle))
                ) && 
                (
                    this.Credentials == input.Credentials ||
                    (this.Credentials != null &&
                    this.Credentials.Equals(input.Credentials))
                ) && 
                (
                    this.BackendType == input.BackendType ||
                    (this.BackendType != null &&
                    this.BackendType.Equals(input.BackendType))
                ) && 
                (
                    this.Backend == input.Backend ||
                    (this.Backend != null &&
                    this.Backend.Equals(input.Backend))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Container != null)
                    hashCode = hashCode * 59 + this.Container.GetHashCode();
                if (this.Lifecycle != null)
                    hashCode = hashCode * 59 + this.Lifecycle.GetHashCode();
                if (this.Credentials != null)
                    hashCode = hashCode * 59 + this.Credentials.GetHashCode();
                if (this.BackendType != null)
                    hashCode = hashCode * 59 + this.BackendType.GetHashCode();
                if (this.Backend != null)
                    hashCode = hashCode * 59 + this.Backend.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
