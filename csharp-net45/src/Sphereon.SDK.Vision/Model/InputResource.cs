/* 
 * Vision
 *
 * Sphereon Vision APIs
 *
 * OpenAPI spec version: 0.2
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.Vision.Client.SwaggerDateConverter;

namespace Sphereon.SDK.Vision.Model
{
    /// <summary>
    /// InputResource
    /// </summary>
    [DataContract]
    public partial class InputResource :  IEquatable<InputResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InputResource" /> class.
        /// </summary>
        /// <param name="StreamLocation">The storage location of the input file..</param>
        public InputResource(StreamLocation StreamLocation = default(StreamLocation))
        {
            this.StreamLocation = StreamLocation;
        }
        
        /// <summary>
        /// The storage location of the input file.
        /// </summary>
        /// <value>The storage location of the input file.</value>
        [DataMember(Name="streamLocation", EmitDefaultValue=false)]
        public StreamLocation StreamLocation { get; set; }

        /// <summary>
        /// An id that links the file with the input and result.
        /// </summary>
        /// <value>An id that links the file with the input and result.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputResource {\n");
            sb.Append("  StreamLocation: ").Append(StreamLocation).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputResource);
        }

        /// <summary>
        /// Returns true if InputResource instances are equal
        /// </summary>
        /// <param name="input">Instance of InputResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StreamLocation == input.StreamLocation ||
                    (this.StreamLocation != null &&
                    this.StreamLocation.Equals(input.StreamLocation))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StreamLocation != null)
                    hashCode = hashCode * 59 + this.StreamLocation.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
