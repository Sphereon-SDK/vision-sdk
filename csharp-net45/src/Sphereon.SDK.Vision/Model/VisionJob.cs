/* 
 * Vision
 *
 * Sphereon Vision APIs
 *
 * OpenAPI spec version: 0.2
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.Vision.Client.SwaggerDateConverter;

namespace Sphereon.SDK.Vision.Model
{
    /// <summary>
    /// The Vision tests. Has access to the tests settings.
    /// </summary>
    [DataContract]
    public partial class VisionJob :  IEquatable<VisionJob>, IValidatableObject
    {
        /// <summary>
        /// The status of the vision job,
        /// </summary>
        /// <value>The status of the vision job,</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum UPLOADRESOURCES for value: UPLOAD_RESOURCES
            /// </summary>
            [EnumMember(Value = "UPLOAD_RESOURCES")]
            UPLOADRESOURCES = 1,
            
            /// <summary>
            /// Enum PROCESSING for value: PROCESSING
            /// </summary>
            [EnumMember(Value = "PROCESSING")]
            PROCESSING = 2,
            
            /// <summary>
            /// Enum DONE for value: DONE
            /// </summary>
            [EnumMember(Value = "DONE")]
            DONE = 3,
            
            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 4,
            
            /// <summary>
            /// Enum DELETED for value: DELETED
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETED = 5
        }

        /// <summary>
        /// The status of the vision job,
        /// </summary>
        /// <value>The status of the vision job,</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VisionJob" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VisionJob() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VisionJob" /> class.
        /// </summary>
        /// <param name="Settings">The settings used during execution of the vision task..</param>
        /// <param name="Inputs">The input images. Currently supported inputs are: jpeg, png, bmp. (required).</param>
        /// <param name="Results">The tags that are predicted for each input..</param>
        /// <param name="Status">A list of status messages. A status message, which can be informational, warning or error. A message here does not indicate an error perse..</param>
        public VisionJob(VisionSettings Settings = default(VisionSettings), List<InputResource> Inputs = default(List<InputResource>), Dictionary<string, Result> Results = default(Dictionary<string, Result>), List<StatusMessage> Status = default(List<StatusMessage>))
        {
            // to ensure "Inputs" is required (not null)
            if (Inputs == null)
            {
                throw new InvalidDataException("Inputs is a required property for VisionJob and cannot be null");
            }
            else
            {
                this.Inputs = Inputs;
            }
            this.Settings = Settings;
            this.Results = Results;
            this.Status = Status;
        }
        
        /// <summary>
        /// The completion date/time of this tests in ISO 8601 format.
        /// </summary>
        /// <value>The completion date/time of this tests in ISO 8601 format.</value>
        [DataMember(Name="completionTime", EmitDefaultValue=false)]
        public DateTime? CompletionTime { get; private set; }

        /// <summary>
        /// The job id
        /// </summary>
        /// <value>The job id</value>
        [DataMember(Name="jobId", EmitDefaultValue=false)]
        public string JobId { get; private set; }

        /// <summary>
        /// The settings used during execution of the vision task.
        /// </summary>
        /// <value>The settings used during execution of the vision task.</value>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public VisionSettings Settings { get; set; }

        /// <summary>
        /// The creation date/time of this tests in ISO 8601 format.
        /// </summary>
        /// <value>The creation date/time of this tests in ISO 8601 format.</value>
        [DataMember(Name="creationTime", EmitDefaultValue=false)]
        public DateTime? CreationTime { get; private set; }

        /// <summary>
        /// The input images. Currently supported inputs are: jpeg, png, bmp.
        /// </summary>
        /// <value>The input images. Currently supported inputs are: jpeg, png, bmp.</value>
        [DataMember(Name="inputs", EmitDefaultValue=false)]
        public List<InputResource> Inputs { get; set; }

        /// <summary>
        /// The last update date/time of this tests in ISO 8601 format.
        /// </summary>
        /// <value>The last update date/time of this tests in ISO 8601 format.</value>
        [DataMember(Name="updateTime", EmitDefaultValue=false)]
        public DateTime? UpdateTime { get; private set; }


        /// <summary>
        /// The tags that are predicted for each input.
        /// </summary>
        /// <value>The tags that are predicted for each input.</value>
        [DataMember(Name="results", EmitDefaultValue=false)]
        public Dictionary<string, Result> Results { get; set; }

        /// <summary>
        /// The queue date/time of this tests in ISO 8601 format.
        /// </summary>
        /// <value>The queue date/time of this tests in ISO 8601 format.</value>
        [DataMember(Name="queueTime", EmitDefaultValue=false)]
        public DateTime? QueueTime { get; private set; }

        /// <summary>
        /// A list of status messages. A status message, which can be informational, warning or error. A message here does not indicate an error perse.
        /// </summary>
        /// <value>A list of status messages. A status message, which can be informational, warning or error. A message here does not indicate an error perse.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public List<StatusMessage> Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VisionJob {\n");
            sb.Append("  CompletionTime: ").Append(CompletionTime).Append("\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  QueueTime: ").Append(QueueTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VisionJob);
        }

        /// <summary>
        /// Returns true if VisionJob instances are equal
        /// </summary>
        /// <param name="input">Instance of VisionJob to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VisionJob input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CompletionTime == input.CompletionTime ||
                    (this.CompletionTime != null &&
                    this.CompletionTime.Equals(input.CompletionTime))
                ) && 
                (
                    this.JobId == input.JobId ||
                    (this.JobId != null &&
                    this.JobId.Equals(input.JobId))
                ) && 
                (
                    this.Settings == input.Settings ||
                    (this.Settings != null &&
                    this.Settings.Equals(input.Settings))
                ) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                ) && 
                (
                    this.Inputs == input.Inputs ||
                    this.Inputs != null &&
                    this.Inputs.SequenceEqual(input.Inputs)
                ) && 
                (
                    this.UpdateTime == input.UpdateTime ||
                    (this.UpdateTime != null &&
                    this.UpdateTime.Equals(input.UpdateTime))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                ) && 
                (
                    this.QueueTime == input.QueueTime ||
                    (this.QueueTime != null &&
                    this.QueueTime.Equals(input.QueueTime))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status != null &&
                    this.Status.SequenceEqual(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CompletionTime != null)
                    hashCode = hashCode * 59 + this.CompletionTime.GetHashCode();
                if (this.JobId != null)
                    hashCode = hashCode * 59 + this.JobId.GetHashCode();
                if (this.Settings != null)
                    hashCode = hashCode * 59 + this.Settings.GetHashCode();
                if (this.CreationTime != null)
                    hashCode = hashCode * 59 + this.CreationTime.GetHashCode();
                if (this.Inputs != null)
                    hashCode = hashCode * 59 + this.Inputs.GetHashCode();
                if (this.UpdateTime != null)
                    hashCode = hashCode * 59 + this.UpdateTime.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Results != null)
                    hashCode = hashCode * 59 + this.Results.GetHashCode();
                if (this.QueueTime != null)
                    hashCode = hashCode * 59 + this.QueueTime.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
