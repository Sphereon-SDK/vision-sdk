/* 
 * Vision
 *
 * Sphereon Vision APIs
 *
 * OpenAPI spec version: 0.2
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.Vision.Client.SwaggerDateConverter;

namespace Sphereon.SDK.Vision.Model
{
    /// <summary>
    /// Vision settings
    /// </summary>
    [DataContract]
    public partial class VisionSettings :  IEquatable<VisionSettings>, IValidatableObject
    {
        /// <summary>
        /// The provider of the storage.
        /// </summary>
        /// <value>The provider of the storage.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StorageProviderEnum
        {
            
            /// <summary>
            /// Enum SUPPLIER for value: API_SUPPLIER
            /// </summary>
            [EnumMember(Value = "API_SUPPLIER")]
            SUPPLIER = 1
        }

        /// <summary>
        /// The provider of the storage.
        /// </summary>
        /// <value>The provider of the storage.</value>
        [DataMember(Name="storageProvider", EmitDefaultValue=false)]
        public StorageProviderEnum? StorageProvider { get; set; }
        /// <summary>
        /// Defines Vendor
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VendorEnum
        {
            
            /// <summary>
            /// Enum GOOGLEVISION for value: GOOGLE_VISION
            /// </summary>
            [EnumMember(Value = "GOOGLE_VISION")]
            GOOGLEVISION = 1,
            
            /// <summary>
            /// Enum MSAZUREVISION for value: MS_AZURE_VISION
            /// </summary>
            [EnumMember(Value = "MS_AZURE_VISION")]
            MSAZUREVISION = 2,
            
            /// <summary>
            /// Enum CLARIFAI for value: CLARIFAI
            /// </summary>
            [EnumMember(Value = "CLARIFAI")]
            CLARIFAI = 3,
            
            /// <summary>
            /// Enum AWS for value: AWS
            /// </summary>
            [EnumMember(Value = "AWS")]
            AWS = 4
        }

        /// <summary>
        /// Gets or Sets Vendor
        /// </summary>
        [DataMember(Name="vendor", EmitDefaultValue=false)]
        public VendorEnum? Vendor { get; set; }
        /// <summary>
        /// Defines DetectionTypes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DetectionTypesEnum
        {
            
            /// <summary>
            /// Enum LABEL for value: LABEL
            /// </summary>
            [EnumMember(Value = "LABEL")]
            LABEL = 1,
            
            /// <summary>
            /// Enum TEXT for value: TEXT
            /// </summary>
            [EnumMember(Value = "TEXT")]
            TEXT = 2,
            
            /// <summary>
            /// Enum FACIAL for value: FACIAL
            /// </summary>
            [EnumMember(Value = "FACIAL")]
            FACIAL = 3,
            
            /// <summary>
            /// Enum LOGO for value: LOGO
            /// </summary>
            [EnumMember(Value = "LOGO")]
            LOGO = 4,
            
            /// <summary>
            /// Enum HANDWRITTEN for value: HANDWRITTEN
            /// </summary>
            [EnumMember(Value = "HANDWRITTEN")]
            HANDWRITTEN = 5
        }


        /// <summary>
        /// The type of vision detection that should be performed on images. Different vendors support different detection types. All vendors support at least label detection.
        /// </summary>
        /// <value>The type of vision detection that should be performed on images. Different vendors support different detection types. All vendors support at least label detection.</value>
        [DataMember(Name="detectionTypes", EmitDefaultValue=false)]
        public List<DetectionTypesEnum> DetectionTypes { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VisionSettings" /> class.
        /// </summary>
        /// <param name="StorageProvider">The provider of the storage..</param>
        /// <param name="StorageSettings">The settings of which storage is used to store images. The settings should be provided dependent on the StorageProvider setting..</param>
        /// <param name="Vendor">Vendor.</param>
        /// <param name="DetectionTypes">The type of vision detection that should be performed on images. Different vendors support different detection types. All vendors support at least label detection..</param>
        public VisionSettings(StorageProviderEnum? StorageProvider = default(StorageProviderEnum?), StorageSettings StorageSettings = default(StorageSettings), VendorEnum? Vendor = default(VendorEnum?), List<DetectionTypesEnum> DetectionTypes = default(List<DetectionTypesEnum>))
        {
            this.StorageProvider = StorageProvider;
            this.StorageSettings = StorageSettings;
            this.Vendor = Vendor;
            this.DetectionTypes = DetectionTypes;
        }
        

        /// <summary>
        /// The settings of which storage is used to store images. The settings should be provided dependent on the StorageProvider setting.
        /// </summary>
        /// <value>The settings of which storage is used to store images. The settings should be provided dependent on the StorageProvider setting.</value>
        [DataMember(Name="storageSettings", EmitDefaultValue=false)]
        public StorageSettings StorageSettings { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VisionSettings {\n");
            sb.Append("  StorageProvider: ").Append(StorageProvider).Append("\n");
            sb.Append("  StorageSettings: ").Append(StorageSettings).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  DetectionTypes: ").Append(DetectionTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VisionSettings);
        }

        /// <summary>
        /// Returns true if VisionSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of VisionSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VisionSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StorageProvider == input.StorageProvider ||
                    (this.StorageProvider != null &&
                    this.StorageProvider.Equals(input.StorageProvider))
                ) && 
                (
                    this.StorageSettings == input.StorageSettings ||
                    (this.StorageSettings != null &&
                    this.StorageSettings.Equals(input.StorageSettings))
                ) && 
                (
                    this.Vendor == input.Vendor ||
                    (this.Vendor != null &&
                    this.Vendor.Equals(input.Vendor))
                ) && 
                (
                    this.DetectionTypes == input.DetectionTypes ||
                    this.DetectionTypes != null &&
                    this.DetectionTypes.SequenceEqual(input.DetectionTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StorageProvider != null)
                    hashCode = hashCode * 59 + this.StorageProvider.GetHashCode();
                if (this.StorageSettings != null)
                    hashCode = hashCode * 59 + this.StorageSettings.GetHashCode();
                if (this.Vendor != null)
                    hashCode = hashCode * 59 + this.Vendor.GetHashCode();
                if (this.DetectionTypes != null)
                    hashCode = hashCode * 59 + this.DetectionTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
