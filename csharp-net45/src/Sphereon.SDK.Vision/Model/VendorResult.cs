/* 
 * Vision
 *
 * Sphereon Vision APIs
 *
 * OpenAPI spec version: 0.2
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.Vision.Client.SwaggerDateConverter;

namespace Sphereon.SDK.Vision.Model
{
    /// <summary>
    /// VendorResult
    /// </summary>
    [DataContract]
    public partial class VendorResult :  IEquatable<VendorResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorResult" /> class.
        /// </summary>
        /// <param name="Labels">labels that are predicted.</param>
        /// <param name="Ocr">ocr result.</param>
        public VendorResult(List<Tag> Labels = default(List<Tag>), List<Tag> Ocr = default(List<Tag>))
        {
            this.Labels = Labels;
            this.Ocr = Ocr;
        }
        
        /// <summary>
        /// labels that are predicted
        /// </summary>
        /// <value>labels that are predicted</value>
        [DataMember(Name="labels", EmitDefaultValue=false)]
        public List<Tag> Labels { get; set; }

        /// <summary>
        /// ocr result
        /// </summary>
        /// <value>ocr result</value>
        [DataMember(Name="ocr", EmitDefaultValue=false)]
        public List<Tag> Ocr { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VendorResult {\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Ocr: ").Append(Ocr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VendorResult);
        }

        /// <summary>
        /// Returns true if VendorResult instances are equal
        /// </summary>
        /// <param name="input">Instance of VendorResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VendorResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Labels == input.Labels ||
                    this.Labels != null &&
                    this.Labels.SequenceEqual(input.Labels)
                ) && 
                (
                    this.Ocr == input.Ocr ||
                    this.Ocr != null &&
                    this.Ocr.SequenceEqual(input.Ocr)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Labels != null)
                    hashCode = hashCode * 59 + this.Labels.GetHashCode();
                if (this.Ocr != null)
                    hashCode = hashCode * 59 + this.Ocr.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
