/* 
 * Vision
 *
 * Sphereon Vision APIs
 *
 * OpenAPI spec version: 0.2
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.Vision.Client.SwaggerDateConverter;

namespace Sphereon.SDK.Vision.Model
{
    /// <summary>
    /// Credentials
    /// </summary>
    [DataContract]
    public partial class Credentials :  IEquatable<Credentials>, IValidatableObject
    {
        /// <summary>
        /// Defines CredentialType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CredentialTypeEnum
        {
            
            /// <summary>
            /// Enum NoCredentials for value: NoCredentials
            /// </summary>
            [EnumMember(Value = "NoCredentials")]
            NoCredentials = 1,
            
            /// <summary>
            /// Enum OAuthCredentials for value: OAuthCredentials
            /// </summary>
            [EnumMember(Value = "OAuthCredentials")]
            OAuthCredentials = 2,
            
            /// <summary>
            /// Enum BearerTokenCredentials for value: BearerTokenCredentials
            /// </summary>
            [EnumMember(Value = "BearerTokenCredentials")]
            BearerTokenCredentials = 3,
            
            /// <summary>
            /// Enum UsernamePasswordCredentials for value: UsernamePasswordCredentials
            /// </summary>
            [EnumMember(Value = "UsernamePasswordCredentials")]
            UsernamePasswordCredentials = 4,
            
            /// <summary>
            /// Enum OAuth2ClientCredentials for value: OAuth2ClientCredentials
            /// </summary>
            [EnumMember(Value = "OAuth2ClientCredentials")]
            OAuth2ClientCredentials = 5
        }

        /// <summary>
        /// Gets or Sets CredentialType
        /// </summary>
        [DataMember(Name="credentialType", EmitDefaultValue=false)]
        public CredentialTypeEnum? CredentialType { get; set; }
        /// <summary>
        /// Defines AuthenticationProvider
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuthenticationProviderEnum
        {
            
            /// <summary>
            /// Enum SUPPLIER for value: API_SUPPLIER
            /// </summary>
            [EnumMember(Value = "API_SUPPLIER")]
            SUPPLIER = 1,
            
            /// <summary>
            /// Enum IMPLEMENTER for value: API_IMPLEMENTER
            /// </summary>
            [EnumMember(Value = "API_IMPLEMENTER")]
            IMPLEMENTER = 2
        }

        /// <summary>
        /// Gets or Sets AuthenticationProvider
        /// </summary>
        [DataMember(Name="authenticationProvider", EmitDefaultValue=false)]
        public AuthenticationProviderEnum? AuthenticationProvider { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Credentials" /> class.
        /// </summary>
        /// <param name="CredentialType">CredentialType.</param>
        /// <param name="AuthenticationProvider">AuthenticationProvider.</param>
        public Credentials(CredentialTypeEnum? CredentialType = default(CredentialTypeEnum?), AuthenticationProviderEnum? AuthenticationProvider = default(AuthenticationProviderEnum?))
        {
            this.CredentialType = CredentialType;
            this.AuthenticationProvider = AuthenticationProvider;
        }
        


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Credentials {\n");
            sb.Append("  CredentialType: ").Append(CredentialType).Append("\n");
            sb.Append("  AuthenticationProvider: ").Append(AuthenticationProvider).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Credentials);
        }

        /// <summary>
        /// Returns true if Credentials instances are equal
        /// </summary>
        /// <param name="input">Instance of Credentials to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Credentials input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CredentialType == input.CredentialType ||
                    (this.CredentialType != null &&
                    this.CredentialType.Equals(input.CredentialType))
                ) && 
                (
                    this.AuthenticationProvider == input.AuthenticationProvider ||
                    (this.AuthenticationProvider != null &&
                    this.AuthenticationProvider.Equals(input.AuthenticationProvider))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CredentialType != null)
                    hashCode = hashCode * 59 + this.CredentialType.GetHashCode();
                if (this.AuthenticationProvider != null)
                    hashCode = hashCode * 59 + this.AuthenticationProvider.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
