/* 
 * Vision
 *
 * Sphereon Vision APIs
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Sphereon.SDK.Vision.Client;
using Sphereon.SDK.Vision.Model;

namespace Sphereon.SDK.Vision.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVisionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Start classification of a vision job
        /// </summary>
        /// <remarks>
        /// Start classification of a vision job
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>VisionJob</returns>
        VisionJob ClassifyJob (string jobid);

        /// <summary>
        /// Start classification of a vision job
        /// </summary>
        /// <remarks>
        /// Start classification of a vision job
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ApiResponse of VisionJob</returns>
        ApiResponse<VisionJob> ClassifyJobWithHttpInfo (string jobid);
        /// <summary>
        /// Create a new vision job
        /// </summary>
        /// <remarks>
        /// Create a new job for the vision operation
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="visionSettings">visionSettings</param>
        /// <returns>VisionJob</returns>
        VisionJob CreateVisionJob (VisionSettings visionSettings);

        /// <summary>
        /// Create a new vision job
        /// </summary>
        /// <remarks>
        /// Create a new job for the vision operation
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="visionSettings">visionSettings</param>
        /// <returns>ApiResponse of VisionJob</returns>
        ApiResponse<VisionJob> CreateVisionJobWithHttpInfo (VisionSettings visionSettings);
        /// <summary>
        /// Delete a vision job manually
        /// </summary>
        /// <remarks>
        /// Delete a vision job manually
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>VisionJob</returns>
        VisionJob DeleteVisionJob (string jobid);

        /// <summary>
        /// Delete a vision job manually
        /// </summary>
        /// <remarks>
        /// Delete a vision job manually
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ApiResponse of VisionJob</returns>
        ApiResponse<VisionJob> DeleteVisionJobWithHttpInfo (string jobid);
        /// <summary>
        /// Get classification response of a vision job
        /// </summary>
        /// <remarks>
        /// Get classification response of a vision job that completed the classification
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ClassificationResponse</returns>
        ClassificationResponse GetClassificationResult (string jobid);

        /// <summary>
        /// Get classification response of a vision job
        /// </summary>
        /// <remarks>
        /// Get classification response of a vision job that completed the classification
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ApiResponse of ClassificationResponse</returns>
        ApiResponse<ClassificationResponse> GetClassificationResultWithHttpInfo (string jobid);
        /// <summary>
        /// Get a vision job
        /// </summary>
        /// <remarks>
        /// Get a Vision job
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>VisionJob</returns>
        VisionJob GetVisionJob (string jobid);

        /// <summary>
        /// Get a vision job
        /// </summary>
        /// <remarks>
        /// Get a Vision job
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ApiResponse of VisionJob</returns>
        ApiResponse<VisionJob> GetVisionJobWithHttpInfo (string jobid);
        /// <summary>
        /// Upload an image for a vision job
        /// </summary>
        /// <remarks>
        /// Upload an image for a vision job. Processing will not be started yet.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="stream">The binary image to upload for a vision job</param>
        /// <returns>VisionJob</returns>
        VisionJob UploadFile (string jobid, System.IO.Stream stream);

        /// <summary>
        /// Upload an image for a vision job
        /// </summary>
        /// <remarks>
        /// Upload an image for a vision job. Processing will not be started yet.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="stream">The binary image to upload for a vision job</param>
        /// <returns>ApiResponse of VisionJob</returns>
        ApiResponse<VisionJob> UploadFileWithHttpInfo (string jobid, System.IO.Stream stream);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Start classification of a vision job
        /// </summary>
        /// <remarks>
        /// Start classification of a vision job
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of VisionJob</returns>
        System.Threading.Tasks.Task<VisionJob> ClassifyJobAsync (string jobid);

        /// <summary>
        /// Start classification of a vision job
        /// </summary>
        /// <remarks>
        /// Start classification of a vision job
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of ApiResponse (VisionJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<VisionJob>> ClassifyJobAsyncWithHttpInfo (string jobid);
        /// <summary>
        /// Create a new vision job
        /// </summary>
        /// <remarks>
        /// Create a new job for the vision operation
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="visionSettings">visionSettings</param>
        /// <returns>Task of VisionJob</returns>
        System.Threading.Tasks.Task<VisionJob> CreateVisionJobAsync (VisionSettings visionSettings);

        /// <summary>
        /// Create a new vision job
        /// </summary>
        /// <remarks>
        /// Create a new job for the vision operation
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="visionSettings">visionSettings</param>
        /// <returns>Task of ApiResponse (VisionJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<VisionJob>> CreateVisionJobAsyncWithHttpInfo (VisionSettings visionSettings);
        /// <summary>
        /// Delete a vision job manually
        /// </summary>
        /// <remarks>
        /// Delete a vision job manually
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of VisionJob</returns>
        System.Threading.Tasks.Task<VisionJob> DeleteVisionJobAsync (string jobid);

        /// <summary>
        /// Delete a vision job manually
        /// </summary>
        /// <remarks>
        /// Delete a vision job manually
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of ApiResponse (VisionJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<VisionJob>> DeleteVisionJobAsyncWithHttpInfo (string jobid);
        /// <summary>
        /// Get classification response of a vision job
        /// </summary>
        /// <remarks>
        /// Get classification response of a vision job that completed the classification
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of ClassificationResponse</returns>
        System.Threading.Tasks.Task<ClassificationResponse> GetClassificationResultAsync (string jobid);

        /// <summary>
        /// Get classification response of a vision job
        /// </summary>
        /// <remarks>
        /// Get classification response of a vision job that completed the classification
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of ApiResponse (ClassificationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClassificationResponse>> GetClassificationResultAsyncWithHttpInfo (string jobid);
        /// <summary>
        /// Get a vision job
        /// </summary>
        /// <remarks>
        /// Get a Vision job
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of VisionJob</returns>
        System.Threading.Tasks.Task<VisionJob> GetVisionJobAsync (string jobid);

        /// <summary>
        /// Get a vision job
        /// </summary>
        /// <remarks>
        /// Get a Vision job
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of ApiResponse (VisionJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<VisionJob>> GetVisionJobAsyncWithHttpInfo (string jobid);
        /// <summary>
        /// Upload an image for a vision job
        /// </summary>
        /// <remarks>
        /// Upload an image for a vision job. Processing will not be started yet.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="stream">The binary image to upload for a vision job</param>
        /// <returns>Task of VisionJob</returns>
        System.Threading.Tasks.Task<VisionJob> UploadFileAsync (string jobid, System.IO.Stream stream);

        /// <summary>
        /// Upload an image for a vision job
        /// </summary>
        /// <remarks>
        /// Upload an image for a vision job. Processing will not be started yet.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="stream">The binary image to upload for a vision job</param>
        /// <returns>Task of ApiResponse (VisionJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<VisionJob>> UploadFileAsyncWithHttpInfo (string jobid, System.IO.Stream stream);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VisionApi : IVisionApi
    {
        private Sphereon.SDK.Vision.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VisionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VisionApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Sphereon.SDK.Vision.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VisionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VisionApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Sphereon.SDK.Vision.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sphereon.SDK.Vision.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Start classification of a vision job Start classification of a vision job
        /// </summary>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>VisionJob</returns>
        public VisionJob ClassifyJob (string jobid)
        {
             ApiResponse<VisionJob> localVarResponse = ClassifyJobWithHttpInfo(jobid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start classification of a vision job Start classification of a vision job
        /// </summary>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ApiResponse of VisionJob</returns>
        public ApiResponse< VisionJob > ClassifyJobWithHttpInfo (string jobid)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling VisionApi->ClassifyJob");

            var localVarPath = "/barcode/0.1/{jobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClassifyJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VisionJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VisionJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VisionJob)));
            
        }

        /// <summary>
        /// Start classification of a vision job Start classification of a vision job
        /// </summary>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of VisionJob</returns>
        public async System.Threading.Tasks.Task<VisionJob> ClassifyJobAsync (string jobid)
        {
             ApiResponse<VisionJob> localVarResponse = await ClassifyJobAsyncWithHttpInfo(jobid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start classification of a vision job Start classification of a vision job
        /// </summary>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of ApiResponse (VisionJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VisionJob>> ClassifyJobAsyncWithHttpInfo (string jobid)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling VisionApi->ClassifyJob");

            var localVarPath = "/barcode/0.1/{jobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClassifyJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VisionJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VisionJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VisionJob)));
            
        }

        /// <summary>
        /// Create a new vision job Create a new job for the vision operation
        /// </summary>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="visionSettings">visionSettings</param>
        /// <returns>VisionJob</returns>
        public VisionJob CreateVisionJob (VisionSettings visionSettings)
        {
             ApiResponse<VisionJob> localVarResponse = CreateVisionJobWithHttpInfo(visionSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new vision job Create a new job for the vision operation
        /// </summary>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="visionSettings">visionSettings</param>
        /// <returns>ApiResponse of VisionJob</returns>
        public ApiResponse< VisionJob > CreateVisionJobWithHttpInfo (VisionSettings visionSettings)
        {
            // verify the required parameter 'visionSettings' is set
            if (visionSettings == null)
                throw new ApiException(400, "Missing required parameter 'visionSettings' when calling VisionApi->CreateVisionJob");

            var localVarPath = "/barcode/0.1/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (visionSettings != null && visionSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(visionSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = visionSettings; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateVisionJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VisionJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VisionJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VisionJob)));
            
        }

        /// <summary>
        /// Create a new vision job Create a new job for the vision operation
        /// </summary>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="visionSettings">visionSettings</param>
        /// <returns>Task of VisionJob</returns>
        public async System.Threading.Tasks.Task<VisionJob> CreateVisionJobAsync (VisionSettings visionSettings)
        {
             ApiResponse<VisionJob> localVarResponse = await CreateVisionJobAsyncWithHttpInfo(visionSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new vision job Create a new job for the vision operation
        /// </summary>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="visionSettings">visionSettings</param>
        /// <returns>Task of ApiResponse (VisionJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VisionJob>> CreateVisionJobAsyncWithHttpInfo (VisionSettings visionSettings)
        {
            // verify the required parameter 'visionSettings' is set
            if (visionSettings == null)
                throw new ApiException(400, "Missing required parameter 'visionSettings' when calling VisionApi->CreateVisionJob");

            var localVarPath = "/barcode/0.1/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (visionSettings != null && visionSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(visionSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = visionSettings; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateVisionJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VisionJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VisionJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VisionJob)));
            
        }

        /// <summary>
        /// Delete a vision job manually Delete a vision job manually
        /// </summary>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>VisionJob</returns>
        public VisionJob DeleteVisionJob (string jobid)
        {
             ApiResponse<VisionJob> localVarResponse = DeleteVisionJobWithHttpInfo(jobid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a vision job manually Delete a vision job manually
        /// </summary>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ApiResponse of VisionJob</returns>
        public ApiResponse< VisionJob > DeleteVisionJobWithHttpInfo (string jobid)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling VisionApi->DeleteVisionJob");

            var localVarPath = "/barcode/0.1/{jobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteVisionJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VisionJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VisionJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VisionJob)));
            
        }

        /// <summary>
        /// Delete a vision job manually Delete a vision job manually
        /// </summary>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of VisionJob</returns>
        public async System.Threading.Tasks.Task<VisionJob> DeleteVisionJobAsync (string jobid)
        {
             ApiResponse<VisionJob> localVarResponse = await DeleteVisionJobAsyncWithHttpInfo(jobid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a vision job manually Delete a vision job manually
        /// </summary>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of ApiResponse (VisionJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VisionJob>> DeleteVisionJobAsyncWithHttpInfo (string jobid)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling VisionApi->DeleteVisionJob");

            var localVarPath = "/barcode/0.1/{jobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteVisionJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VisionJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VisionJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VisionJob)));
            
        }

        /// <summary>
        /// Get classification response of a vision job Get classification response of a vision job that completed the classification
        /// </summary>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ClassificationResponse</returns>
        public ClassificationResponse GetClassificationResult (string jobid)
        {
             ApiResponse<ClassificationResponse> localVarResponse = GetClassificationResultWithHttpInfo(jobid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get classification response of a vision job Get classification response of a vision job that completed the classification
        /// </summary>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ApiResponse of ClassificationResponse</returns>
        public ApiResponse< ClassificationResponse > GetClassificationResultWithHttpInfo (string jobid)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling VisionApi->GetClassificationResult");

            var localVarPath = "/barcode/0.1/{jobid}/result";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClassificationResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassificationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClassificationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassificationResponse)));
            
        }

        /// <summary>
        /// Get classification response of a vision job Get classification response of a vision job that completed the classification
        /// </summary>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of ClassificationResponse</returns>
        public async System.Threading.Tasks.Task<ClassificationResponse> GetClassificationResultAsync (string jobid)
        {
             ApiResponse<ClassificationResponse> localVarResponse = await GetClassificationResultAsyncWithHttpInfo(jobid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get classification response of a vision job Get classification response of a vision job that completed the classification
        /// </summary>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of ApiResponse (ClassificationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClassificationResponse>> GetClassificationResultAsyncWithHttpInfo (string jobid)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling VisionApi->GetClassificationResult");

            var localVarPath = "/barcode/0.1/{jobid}/result";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClassificationResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassificationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClassificationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassificationResponse)));
            
        }

        /// <summary>
        /// Get a vision job Get a Vision job
        /// </summary>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>VisionJob</returns>
        public VisionJob GetVisionJob (string jobid)
        {
             ApiResponse<VisionJob> localVarResponse = GetVisionJobWithHttpInfo(jobid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a vision job Get a Vision job
        /// </summary>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ApiResponse of VisionJob</returns>
        public ApiResponse< VisionJob > GetVisionJobWithHttpInfo (string jobid)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling VisionApi->GetVisionJob");

            var localVarPath = "/barcode/0.1/{jobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVisionJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VisionJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VisionJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VisionJob)));
            
        }

        /// <summary>
        /// Get a vision job Get a Vision job
        /// </summary>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of VisionJob</returns>
        public async System.Threading.Tasks.Task<VisionJob> GetVisionJobAsync (string jobid)
        {
             ApiResponse<VisionJob> localVarResponse = await GetVisionJobAsyncWithHttpInfo(jobid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a vision job Get a Vision job
        /// </summary>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of ApiResponse (VisionJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VisionJob>> GetVisionJobAsyncWithHttpInfo (string jobid)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling VisionApi->GetVisionJob");

            var localVarPath = "/barcode/0.1/{jobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVisionJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VisionJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VisionJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VisionJob)));
            
        }

        /// <summary>
        /// Upload an image for a vision job Upload an image for a vision job. Processing will not be started yet.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="stream">The binary image to upload for a vision job</param>
        /// <returns>VisionJob</returns>
        public VisionJob UploadFile (string jobid, System.IO.Stream stream)
        {
             ApiResponse<VisionJob> localVarResponse = UploadFileWithHttpInfo(jobid, stream);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload an image for a vision job Upload an image for a vision job. Processing will not be started yet.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="stream">The binary image to upload for a vision job</param>
        /// <returns>ApiResponse of VisionJob</returns>
        public ApiResponse< VisionJob > UploadFileWithHttpInfo (string jobid, System.IO.Stream stream)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling VisionApi->UploadFile");
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling VisionApi->UploadFile");

            var localVarPath = "/barcode/0.1/{jobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter
            if (stream != null) localVarFileParams.Add("stream", Configuration.ApiClient.ParameterToFile("stream", stream));

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VisionJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VisionJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VisionJob)));
            
        }

        /// <summary>
        /// Upload an image for a vision job Upload an image for a vision job. Processing will not be started yet.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="stream">The binary image to upload for a vision job</param>
        /// <returns>Task of VisionJob</returns>
        public async System.Threading.Tasks.Task<VisionJob> UploadFileAsync (string jobid, System.IO.Stream stream)
        {
             ApiResponse<VisionJob> localVarResponse = await UploadFileAsyncWithHttpInfo(jobid, stream);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload an image for a vision job Upload an image for a vision job. Processing will not be started yet.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Vision.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="stream">The binary image to upload for a vision job</param>
        /// <returns>Task of ApiResponse (VisionJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VisionJob>> UploadFileAsyncWithHttpInfo (string jobid, System.IO.Stream stream)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling VisionApi->UploadFile");
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling VisionApi->UploadFile");

            var localVarPath = "/barcode/0.1/{jobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter
            if (stream != null) localVarFileParams.Add("stream", Configuration.ApiClient.ParameterToFile("stream", stream));

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VisionJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VisionJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VisionJob)));
            
        }

    }
}
