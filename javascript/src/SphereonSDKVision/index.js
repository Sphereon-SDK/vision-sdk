/**
 * Barcode
 * <b>The Barcode Reader API '/reader' reads barcodes from image files and returns the barcode data as JSON files.</b>    The flow is generally as follows:  1. First upload an image using the /reader POST endpoint. You will get back a job response that contains a job with its associated settings.  2. Start the job from a PUT request to the /reader/{jobid} endpoint, with the Job and Settings JSON as request body. The barcode detection will now start.  3. Check the job status from the /reader/{jobid} GET endpoint until the status has changed to DONE or ERROR. Messaging using a websocket will be available as an alternative in a future version  4. Retrieve the JSON file using the /reader/{jobid}/stream GET endpoint. This will return the JSON file only when the status is DONE. In other cases it will return the Job Response JSON (with http code 202 instead of 200)      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKVision/ApiClient', 'SphereonSDKVision/model/Barcode', 'SphereonSDKVision/model/BarcodeCoordinate', 'SphereonSDKVision/model/Error', 'SphereonSDKVision/model/ErrorResponse', 'SphereonSDKVision/model/Lifecycle', 'SphereonSDKVision/model/ReaderEngineTask', 'SphereonSDKVision/model/ReaderJob', 'SphereonSDKVision/model/ReaderJobResponse', 'SphereonSDKVision/model/ReaderJobSettings', 'SphereonSDKVision/model/ReaderResultJobResponse', 'SphereonSDKVision/api/BarcodeReaderApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Barcode'), require('./model/BarcodeCoordinate'), require('./model/Error'), require('./model/ErrorResponse'), require('./model/Lifecycle'), require('./model/ReaderEngineTask'), require('./model/ReaderJob'), require('./model/ReaderJobResponse'), require('./model/ReaderJobSettings'), require('./model/ReaderResultJobResponse'), require('./api/BarcodeReaderApi'));
  }
}(function(ApiClient, Barcode, BarcodeCoordinate, Error, ErrorResponse, Lifecycle, ReaderEngineTask, ReaderJob, ReaderJobResponse, ReaderJobSettings, ReaderResultJobResponse, BarcodeReaderApi) {
  'use strict';

  /**
   * bThe_Barcode_Reader_API_reader_reads_barcodes_from_image_files_and_returns_the_barcode_data_as_JSON_files_bThe_flow_is_generally_as_follows1__First_upload_an_image_using_the_reader_POST_endpoint__You_will_get_back_a_job_response_that_contains_a_job_with_its_associated_settings_2__Start_the_job_from_a_PUT_request_to_the_readerjobid_endpoint_with_the_Job_and_Settings_JSON_as_request_body__The_barcode_detection_will_now_start_3__Check_the_job_status_from_the_readerjobid_GET_endpoint_until_the_status_has_changed_to_DONE_or_ERROR__Messaging_using_a_websocket_will_be_available_as_an_alternative_in_a_future_version4__Retrieve_the_JSON_file_using_the_readerjobidstream_GET_endpoint__This_will_return_the_JSON_file_only_when_the_status_is_DONE__In_other_cases_it_will_return_the_Job_Response_JSON__with_http_code_202_instead_of_200bInteractive_testing_bA_web_based_test_console_is_available_in_the_a_hrefhttpsstore_sphereon_comSphereon_API_Storea.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var Barcode = require('SphereonSDKVision/index'); // See note below*.
   * var xxxSvc = new Barcode.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new Barcode.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['SphereonSDKVision/index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new Barcode.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new Barcode.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module SphereonSDKVision/index
   * @version 0.1.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:SphereonSDKVision/ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Barcode model constructor.
     * @property {module:SphereonSDKVision/model/Barcode}
     */
    Barcode: Barcode,
    /**
     * The BarcodeCoordinate model constructor.
     * @property {module:SphereonSDKVision/model/BarcodeCoordinate}
     */
    BarcodeCoordinate: BarcodeCoordinate,
    /**
     * The Error model constructor.
     * @property {module:SphereonSDKVision/model/Error}
     */
    Error: Error,
    /**
     * The ErrorResponse model constructor.
     * @property {module:SphereonSDKVision/model/ErrorResponse}
     */
    ErrorResponse: ErrorResponse,
    /**
     * The Lifecycle model constructor.
     * @property {module:SphereonSDKVision/model/Lifecycle}
     */
    Lifecycle: Lifecycle,
    /**
     * The ReaderEngineTask model constructor.
     * @property {module:SphereonSDKVision/model/ReaderEngineTask}
     */
    ReaderEngineTask: ReaderEngineTask,
    /**
     * The ReaderJob model constructor.
     * @property {module:SphereonSDKVision/model/ReaderJob}
     */
    ReaderJob: ReaderJob,
    /**
     * The ReaderJobResponse model constructor.
     * @property {module:SphereonSDKVision/model/ReaderJobResponse}
     */
    ReaderJobResponse: ReaderJobResponse,
    /**
     * The ReaderJobSettings model constructor.
     * @property {module:SphereonSDKVision/model/ReaderJobSettings}
     */
    ReaderJobSettings: ReaderJobSettings,
    /**
     * The ReaderResultJobResponse model constructor.
     * @property {module:SphereonSDKVision/model/ReaderResultJobResponse}
     */
    ReaderResultJobResponse: ReaderResultJobResponse,
    /**
     * The BarcodeReaderApi service constructor.
     * @property {module:SphereonSDKVision/api/BarcodeReaderApi}
     */
    BarcodeReaderApi: BarcodeReaderApi
  };

  return exports;
}));
