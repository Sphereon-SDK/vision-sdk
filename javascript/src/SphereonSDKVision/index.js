/**
 * Vision
 * Sphereon Vision APIs
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKVision/ApiClient', 'SphereonSDKVision/model/ClassificationResponse', 'SphereonSDKVision/model/Error', 'SphereonSDKVision/model/ErrorResponse', 'SphereonSDKVision/model/Tag', 'SphereonSDKVision/model/VisionJob', 'SphereonSDKVision/model/VisionSettings', 'SphereonSDKVision/api/VisionApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/ClassificationResponse'), require('./model/Error'), require('./model/ErrorResponse'), require('./model/Tag'), require('./model/VisionJob'), require('./model/VisionSettings'), require('./api/VisionApi'));
  }
}(function(ApiClient, ClassificationResponse, Error, ErrorResponse, Tag, VisionJob, VisionSettings, VisionApi) {
  'use strict';

  /**
   * Sphereon_Vision_APIs.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var Vision = require('SphereonSDKVision/index'); // See note below*.
   * var xxxSvc = new Vision.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new Vision.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['SphereonSDKVision/index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new Vision.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new Vision.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module SphereonSDKVision/index
   * @version 0.1
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:SphereonSDKVision/ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The ClassificationResponse model constructor.
     * @property {module:SphereonSDKVision/model/ClassificationResponse}
     */
    ClassificationResponse: ClassificationResponse,
    /**
     * The Error model constructor.
     * @property {module:SphereonSDKVision/model/Error}
     */
    Error: Error,
    /**
     * The ErrorResponse model constructor.
     * @property {module:SphereonSDKVision/model/ErrorResponse}
     */
    ErrorResponse: ErrorResponse,
    /**
     * The Tag model constructor.
     * @property {module:SphereonSDKVision/model/Tag}
     */
    Tag: Tag,
    /**
     * The VisionJob model constructor.
     * @property {module:SphereonSDKVision/model/VisionJob}
     */
    VisionJob: VisionJob,
    /**
     * The VisionSettings model constructor.
     * @property {module:SphereonSDKVision/model/VisionSettings}
     */
    VisionSettings: VisionSettings,
    /**
     * The VisionApi service constructor.
     * @property {module:SphereonSDKVision/api/VisionApi}
     */
    VisionApi: VisionApi
  };

  return exports;
}));
