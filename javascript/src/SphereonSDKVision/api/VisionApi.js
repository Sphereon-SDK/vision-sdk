/**
 * Vision
 * Sphereon Vision APIs
 *
 * OpenAPI spec version: 0.2
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKVision/ApiClient', 'SphereonSDKVision/model/ErrorResponse', 'SphereonSDKVision/model/InputResource', 'SphereonSDKVision/model/VisionJob', 'SphereonSDKVision/model/VisionSettings'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/InputResource'), require('../model/VisionJob'), require('../model/VisionSettings'));
  } else {
    // Browser globals (root is window)
    if (!root.Vision) {
      root.Vision = {};
    }
    root.Vision.VisionApi = factory(root.Vision.ApiClient, root.Vision.ErrorResponse, root.Vision.InputResource, root.Vision.VisionJob, root.Vision.VisionSettings);
  }
}(this, function(ApiClient, ErrorResponse, InputResource, VisionJob, VisionSettings) {
  'use strict';

  /**
   * Vision service.
   * @module SphereonSDKVision/api/VisionApi
   * @version 0.2
   */

  /**
   * Constructs a new VisionApi. 
   * @alias module:SphereonSDKVision/api/VisionApi
   * @class
   * @param {module:SphereonSDKVision/ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:SphereonSDKVision/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createVisionJob operation.
     * @callback module:SphereonSDKVision/api/VisionApi~createVisionJobCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKVision/model/VisionJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new vision job
     * Create a new job for the vision operation.
     * @param {module:SphereonSDKVision/model/VisionSettings} visionSettings visionSettings
     * @param {module:SphereonSDKVision/api/VisionApi~createVisionJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKVision/model/VisionJob}
     */
    this.createVisionJob = function(visionSettings, callback) {
      var postBody = visionSettings;

      // verify the required parameter 'visionSettings' is set
      if (visionSettings === undefined || visionSettings === null) {
        throw new Error("Missing the required parameter 'visionSettings' when calling createVisionJob");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = VisionJob;

      return this.apiClient.callApi(
        '/jobs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVisionJob operation.
     * @callback module:SphereonSDKVision/api/VisionApi~deleteVisionJobCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKVision/model/VisionJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a vision job manually
     * Delete a vision job manually. This will delete the uploaded resources if not yet deleted after the job is complete.
     * @param {String} jobId jobId
     * @param {module:SphereonSDKVision/api/VisionApi~deleteVisionJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKVision/model/VisionJob}
     */
    this.deleteVisionJob = function(jobId, callback) {
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling deleteVisionJob");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = [];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = VisionJob;

      return this.apiClient.callApi(
        '/jobs/{jobId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVisionJob operation.
     * @callback module:SphereonSDKVision/api/VisionApi~getVisionJobCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKVision/model/VisionJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a vision job
     * Get a Vision job. After processing the vision job contains the results.
     * @param {String} jobId jobId
     * @param {module:SphereonSDKVision/api/VisionApi~getVisionJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKVision/model/VisionJob}
     */
    this.getVisionJob = function(jobId, callback) {
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getVisionJob");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = [];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = VisionJob;

      return this.apiClient.callApi(
        '/jobs/{jobId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the submitVisionJob operation.
     * @callback module:SphereonSDKVision/api/VisionApi~submitVisionJobCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKVision/model/VisionJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start classification of a vision job
     * Submit a vision job to start classification.
     * @param {String} jobId jobId
     * @param {module:SphereonSDKVision/model/VisionSettings} settings settings
     * @param {module:SphereonSDKVision/api/VisionApi~submitVisionJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKVision/model/VisionJob}
     */
    this.submitVisionJob = function(jobId, settings, callback) {
      var postBody = settings;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling submitVisionJob");
      }

      // verify the required parameter 'settings' is set
      if (settings === undefined || settings === null) {
        throw new Error("Missing the required parameter 'settings' when calling submitVisionJob");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = VisionJob;

      return this.apiClient.callApi(
        '/jobs/{jobId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFile operation.
     * @callback module:SphereonSDKVision/api/VisionApi~uploadFileCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKVision/model/InputResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload an image for a vision job
     * Upload an image for a vision job. Processing will start after submitting the job.
     * @param {String} jobId jobId
     * @param {File} stream The binary image to upload for a vision job
     * @param {module:SphereonSDKVision/api/VisionApi~uploadFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKVision/model/InputResource}
     */
    this.uploadFile = function(jobId, stream, callback) {
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling uploadFile");
      }

      // verify the required parameter 'stream' is set
      if (stream === undefined || stream === null) {
        throw new Error("Missing the required parameter 'stream' when calling uploadFile");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'stream': stream
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = InputResource;

      return this.apiClient.callApi(
        '/jobs/{jobId}/streams/multipart', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
