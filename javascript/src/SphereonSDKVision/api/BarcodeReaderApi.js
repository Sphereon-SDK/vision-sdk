/**
 * Barcode
 * <b>The Barcode Reader API '/reader' reads barcodes from image files and returns the barcode data as JSON files.</b>    The flow is generally as follows:  1. First upload an image using the /reader POST endpoint. You will get back a job response that contains a job with its associated settings.  2. Start the job from a PUT request to the /reader/{jobid} endpoint, with the Job and Settings JSON as request body. The barcode detection will now start.  3. Check the job status from the /reader/{jobid} GET endpoint until the status has changed to DONE or ERROR. Messaging using a websocket will be available as an alternative in a future version  4. Retrieve the JSON file using the /reader/{jobid}/stream GET endpoint. This will return the JSON file only when the status is DONE. In other cases it will return the Job Response JSON (with http code 202 instead of 200)      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKVision/ApiClient', 'SphereonSDKVision/model/ReaderJobResponse', 'SphereonSDKVision/model/ErrorResponse', 'SphereonSDKVision/model/ReaderResultJobResponse', 'SphereonSDKVision/model/ReaderJob'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ReaderJobResponse'), require('../model/ErrorResponse'), require('../model/ReaderResultJobResponse'), require('../model/ReaderJob'));
  } else {
    // Browser globals (root is window)
    if (!root.Barcode) {
      root.Barcode = {};
    }
    root.Barcode.BarcodeReaderApi = factory(root.Barcode.ApiClient, root.Barcode.ReaderJobResponse, root.Barcode.ErrorResponse, root.Barcode.ReaderResultJobResponse, root.Barcode.ReaderJob);
  }
}(this, function(ApiClient, ReaderJobResponse, ErrorResponse, ReaderResultJobResponse, ReaderJob) {
  'use strict';

  /**
   * BarcodeReader service.
   * @module SphereonSDKVision/api/BarcodeReaderApi
   * @version 0.1.0
   */

  /**
   * Constructs a new BarcodeReaderApi. 
   * @alias module:SphereonSDKVision/api/BarcodeReaderApi
   * @class
   * @param {module:SphereonSDKVision/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:SphereonSDKVision/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteJob operation.
     * @callback module:SphereonSDKVision/api/BarcodeReaderApi~deleteJobCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKVision/model/ReaderJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a job manually
     * Delete the Job and all related files
     * @param {String} jobid jobid
     * @param {module:SphereonSDKVision/api/BarcodeReaderApi~deleteJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKVision/model/ReaderJobResponse}
     */
    this.deleteJob = function(jobid, callback) {
      var postBody = null;

      // verify the required parameter 'jobid' is set
      if (jobid == undefined || jobid == null) {
        throw "Missing the required parameter 'jobid' when calling deleteJob";
      }


      var pathParams = {
        'jobid': jobid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ReaderJobResponse;

      return this.apiClient.callApi(
        '/barcode/0.1.0/reader/{jobid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJob operation.
     * @callback module:SphereonSDKVision/api/BarcodeReaderApi~getJobCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKVision/model/ReaderResultJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Job definition and state
     * Get the ReadResult response , job definition and current state. Please note that you can differentiate completion based on http response status
     * @param {String} jobid jobid
     * @param {module:SphereonSDKVision/api/BarcodeReaderApi~getJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKVision/model/ReaderResultJobResponse}
     */
    this.getJob = function(jobid, callback) {
      var postBody = null;

      // verify the required parameter 'jobid' is set
      if (jobid == undefined || jobid == null) {
        throw "Missing the required parameter 'jobid' when calling getJob";
      }


      var pathParams = {
        'jobid': jobid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ReaderResultJobResponse;

      return this.apiClient.callApi(
        '/barcode/0.1.0/reader/{jobid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the submitJob operation.
     * @callback module:SphereonSDKVision/api/BarcodeReaderApi~submitJobCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKVision/model/ReaderJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit job for reading
     * Starts the barcode detection of the uploaded files, using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the jobId in the path must match the jobId in the request
     * @param {String} jobid jobid
     * @param {module:SphereonSDKVision/model/ReaderJob} job jobEntity
     * @param {module:SphereonSDKVision/api/BarcodeReaderApi~submitJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKVision/model/ReaderJobResponse}
     */
    this.submitJob = function(jobid, job, callback) {
      var postBody = job;

      // verify the required parameter 'jobid' is set
      if (jobid == undefined || jobid == null) {
        throw "Missing the required parameter 'jobid' when calling submitJob";
      }

      // verify the required parameter 'job' is set
      if (job == undefined || job == null) {
        throw "Missing the required parameter 'job' when calling submitJob";
      }


      var pathParams = {
        'jobid': jobid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ReaderJobResponse;

      return this.apiClient.callApi(
        '/barcode/0.1.0/reader/{jobid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFile operation.
     * @callback module:SphereonSDKVision/api/BarcodeReaderApi~uploadFileCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKVision/model/ReaderJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload the file
     * Upload the  image.
     * @param {File} stream The first image.
     * @param {module:SphereonSDKVision/api/BarcodeReaderApi~uploadFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKVision/model/ReaderJobResponse}
     */
    this.uploadFile = function(stream, callback) {
      var postBody = null;

      // verify the required parameter 'stream' is set
      if (stream == undefined || stream == null) {
        throw "Missing the required parameter 'stream' when calling uploadFile";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'stream': stream
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ReaderJobResponse;

      return this.apiClient.callApi(
        '/barcode/0.1.0/reader', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
