/**
 * Barcode
 * <b>The Barcode Reader API '/reader' reads barcodes from image files and returns the barcode data as JSON files.</b>    The flow is generally as follows:  1. First upload an image using the /reader POST endpoint. You will get back a job response that contains a job with its associated settings.  2. Start the job from a PUT request to the /reader/{jobid} endpoint, with the Job and Settings JSON as request body. The barcode detection will now start.  3. Check the job status from the /reader/{jobid} GET endpoint until the status has changed to DONE or ERROR. Messaging using a websocket will be available as an alternative in a future version  4. Retrieve the JSON file using the /reader/{jobid}/stream GET endpoint. This will return the JSON file only when the status is DONE. In other cases it will return the Job Response JSON (with http code 202 instead of 200)      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKVision/ApiClient', 'SphereonSDKVision/model/Barcode', 'SphereonSDKVision/model/ReaderEngineTask', 'SphereonSDKVision/model/ReaderJob'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Barcode'), require('./ReaderEngineTask'), require('./ReaderJob'));
  } else {
    // Browser globals (root is window)
    if (!root.Barcode) {
      root.Barcode = {};
    }
    root.Barcode.ReaderResultJobResponse = factory(root.Barcode.ApiClient, root.Barcode.Barcode, root.Barcode.ReaderEngineTask, root.Barcode.ReaderJob);
  }
}(this, function(ApiClient, Barcode, ReaderEngineTask, ReaderJob) {
  'use strict';




  /**
   * The ReaderResultJobResponse model module.
   * @module SphereonSDKVision/model/ReaderResultJobResponse
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>ReaderResultJobResponse</code>.
   * The Reader job response. Has access to the job, it&#39; s settings as well as engine tasks
   * @alias module:SphereonSDKVision/model/ReaderResultJobResponse
   * @class
   * @param inputs {Array.<String>} The original input files. Currently supported inputs are: tif files
   * @param barcodes {Array.<module:SphereonSDKVision/model/Barcode>} The returned barcodes
   * @param status {module:SphereonSDKVision/model/ReaderResultJobResponse.StatusEnum} The status of the job
   */
  var exports = function(inputs, barcodes, status) {
    var _this = this;




    _this['inputs'] = inputs;

    _this['barcodes'] = barcodes;




    _this['status'] = status;
  };

  /**
   * Constructs a <code>ReaderResultJobResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:SphereonSDKVision/model/ReaderResultJobResponse} obj Optional instance to populate.
   * @return {module:SphereonSDKVision/model/ReaderResultJobResponse} The populated <code>ReaderResultJobResponse</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('completionTime')) {
        obj['completionTime'] = ApiClient.convertToType(data['completionTime'], 'Date');
      }
      if (data.hasOwnProperty('jobId')) {
        obj['jobId'] = ApiClient.convertToType(data['jobId'], 'String');
      }
      if (data.hasOwnProperty('creationTime')) {
        obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
      }
      if (data.hasOwnProperty('inputs')) {
        obj['inputs'] = ApiClient.convertToType(data['inputs'], ['String']);
      }
      if (data.hasOwnProperty('updateTime')) {
        obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'Date');
      }
      if (data.hasOwnProperty('barcodes')) {
        obj['barcodes'] = ApiClient.convertToType(data['barcodes'], [Barcode]);
      }
      if (data.hasOwnProperty('job')) {
        obj['job'] = ReaderJob.constructFromObject(data['job']);
      }
      if (data.hasOwnProperty('statusMessage')) {
        obj['statusMessage'] = ApiClient.convertToType(data['statusMessage'], 'String');
      }
      if (data.hasOwnProperty('tasks')) {
        obj['tasks'] = ApiClient.convertToType(data['tasks'], [ReaderEngineTask]);
      }
      if (data.hasOwnProperty('queueTime')) {
        obj['queueTime'] = ApiClient.convertToType(data['queueTime'], 'Date');
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = ApiClient.convertToType(data['status'], 'String');
      }
    }
    return obj;
  }

  /**
   * The completion date/time of this job in ISO 8601 format
   * @member {Date} completionTime
   */
  exports.prototype['completionTime'] = undefined;
  /**
   * @member {String} jobId
   */
  exports.prototype['jobId'] = undefined;
  /**
   * The creation date/time of this job in ISO 8601 format
   * @member {Date} creationTime
   */
  exports.prototype['creationTime'] = undefined;
  /**
   * The original input files. Currently supported inputs are: tif files
   * @member {Array.<String>} inputs
   */
  exports.prototype['inputs'] = undefined;
  /**
   * The last update date/time of this job in ISO 8601 format
   * @member {Date} updateTime
   */
  exports.prototype['updateTime'] = undefined;
  /**
   * The returned barcodes
   * @member {Array.<module:SphereonSDKVision/model/Barcode>} barcodes
   */
  exports.prototype['barcodes'] = undefined;
  /**
   * @member {module:SphereonSDKVision/model/ReaderJob} job
   */
  exports.prototype['job'] = undefined;
  /**
   * A status message, which can be informational, warning or error. A message here does not indicate an error perse
   * @member {String} statusMessage
   */
  exports.prototype['statusMessage'] = undefined;
  /**
   * The server supplied reader task(s)
   * @member {Array.<module:SphereonSDKVision/model/ReaderEngineTask>} tasks
   */
  exports.prototype['tasks'] = undefined;
  /**
   * The reader queue date/time of this job in ISO 8601 format
   * @member {Date} queueTime
   */
  exports.prototype['queueTime'] = undefined;
  /**
   * The status of the job
   * @member {module:SphereonSDKVision/model/ReaderResultJobResponse.StatusEnum} status
   */
  exports.prototype['status'] = undefined;


  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StatusEnum = {
    /**
     * value: "INPUTS_UPLOADED"
     * @const
     */
    "INPUTS_UPLOADED": "INPUTS_UPLOADED",
    /**
     * value: "PROCESSING"
     * @const
     */
    "PROCESSING": "PROCESSING",
    /**
     * value: "DONE"
     * @const
     */
    "DONE": "DONE",
    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",
    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED"  };


  return exports;
}));


