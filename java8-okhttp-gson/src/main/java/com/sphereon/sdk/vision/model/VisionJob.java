/*
 * Vision
 * Sphereon Vision APIs
 *
 * OpenAPI spec version: 0.2
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.vision.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.vision.model.InputResource;
import com.sphereon.sdk.vision.model.Result;
import com.sphereon.sdk.vision.model.StatusMessage;
import com.sphereon.sdk.vision.model.VisionSettings;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The Vision tests. Has access to the tests settings.
 */
@ApiModel(description = "The Vision tests. Has access to the tests settings.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-01-09T14:08:09.031+01:00")
public class VisionJob {
  @SerializedName("completionTime")
  private OffsetDateTime completionTime = null;

  @SerializedName("jobId")
  private String jobId = null;

  @SerializedName("settings")
  private VisionSettings settings = null;

  @SerializedName("creationTime")
  private OffsetDateTime creationTime = null;

  @SerializedName("inputs")
  private List<InputResource> inputs = new ArrayList<>();

  @SerializedName("updateTime")
  private OffsetDateTime updateTime = null;

  /**
   * The status of the vision job,
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    UPLOAD_RESOURCES("UPLOAD_RESOURCES"),
    
    PROCESSING("PROCESSING"),
    
    DONE("DONE"),
    
    ERROR("ERROR"),
    
    DELETED("DELETED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("results")
  private Map<String, Result> results = null;

  @SerializedName("queueTime")
  private OffsetDateTime queueTime = null;

  @SerializedName("status")
  private List<StatusMessage> status = null;

   /**
   * The completion date/time of this tests in ISO 8601 format.
   * @return completionTime
  **/
  @ApiModelProperty(value = "The completion date/time of this tests in ISO 8601 format.")
  public OffsetDateTime getCompletionTime() {
    return completionTime;
  }

   /**
   * The job id
   * @return jobId
  **/
  @ApiModelProperty(value = "The job id")
  public String getJobId() {
    return jobId;
  }

  public VisionJob settings(VisionSettings settings) {
    this.settings = settings;
    return this;
  }

   /**
   * The settings used during execution of the vision task.
   * @return settings
  **/
  @ApiModelProperty(value = "The settings used during execution of the vision task.")
  public VisionSettings getSettings() {
    return settings;
  }

  public void setSettings(VisionSettings settings) {
    this.settings = settings;
  }

   /**
   * The creation date/time of this tests in ISO 8601 format.
   * @return creationTime
  **/
  @ApiModelProperty(value = "The creation date/time of this tests in ISO 8601 format.")
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public VisionJob inputs(List<InputResource> inputs) {
    this.inputs = inputs;
    return this;
  }

  public VisionJob addInputsItem(InputResource inputsItem) {
    this.inputs.add(inputsItem);
    return this;
  }

   /**
   * The input images. Currently supported inputs are: jpeg, png, bmp.
   * @return inputs
  **/
  @ApiModelProperty(required = true, value = "The input images. Currently supported inputs are: jpeg, png, bmp.")
  public List<InputResource> getInputs() {
    return inputs;
  }

  public void setInputs(List<InputResource> inputs) {
    this.inputs = inputs;
  }

   /**
   * The last update date/time of this tests in ISO 8601 format.
   * @return updateTime
  **/
  @ApiModelProperty(value = "The last update date/time of this tests in ISO 8601 format.")
  public OffsetDateTime getUpdateTime() {
    return updateTime;
  }

   /**
   * The status of the vision job,
   * @return state
  **/
  @ApiModelProperty(value = "The status of the vision job,")
  public StateEnum getState() {
    return state;
  }

  public VisionJob results(Map<String, Result> results) {
    this.results = results;
    return this;
  }

  public VisionJob putResultsItem(String key, Result resultsItem) {
    if (this.results == null) {
      this.results = new HashMap<>();
    }
    this.results.put(key, resultsItem);
    return this;
  }

   /**
   * The tags that are predicted for each input.
   * @return results
  **/
  @ApiModelProperty(value = "The tags that are predicted for each input.")
  public Map<String, Result> getResults() {
    return results;
  }

  public void setResults(Map<String, Result> results) {
    this.results = results;
  }

   /**
   * The queue date/time of this tests in ISO 8601 format.
   * @return queueTime
  **/
  @ApiModelProperty(value = "The queue date/time of this tests in ISO 8601 format.")
  public OffsetDateTime getQueueTime() {
    return queueTime;
  }

  public VisionJob status(List<StatusMessage> status) {
    this.status = status;
    return this;
  }

  public VisionJob addStatusItem(StatusMessage statusItem) {
    if (this.status == null) {
      this.status = new ArrayList<>();
    }
    this.status.add(statusItem);
    return this;
  }

   /**
   * A list of status messages. A status message, which can be informational, warning or error. A message here does not indicate an error perse.
   * @return status
  **/
  @ApiModelProperty(value = "A list of status messages. A status message, which can be informational, warning or error. A message here does not indicate an error perse.")
  public List<StatusMessage> getStatus() {
    return status;
  }

  public void setStatus(List<StatusMessage> status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VisionJob visionJob = (VisionJob) o;
    return Objects.equals(this.completionTime, visionJob.completionTime) &&
        Objects.equals(this.jobId, visionJob.jobId) &&
        Objects.equals(this.settings, visionJob.settings) &&
        Objects.equals(this.creationTime, visionJob.creationTime) &&
        Objects.equals(this.inputs, visionJob.inputs) &&
        Objects.equals(this.updateTime, visionJob.updateTime) &&
        Objects.equals(this.state, visionJob.state) &&
        Objects.equals(this.results, visionJob.results) &&
        Objects.equals(this.queueTime, visionJob.queueTime) &&
        Objects.equals(this.status, visionJob.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completionTime, jobId, settings, creationTime, inputs, updateTime, state, results, queueTime, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VisionJob {\n");
    
    sb.append("    completionTime: ").append(toIndentedString(completionTime)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("    queueTime: ").append(toIndentedString(queueTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

