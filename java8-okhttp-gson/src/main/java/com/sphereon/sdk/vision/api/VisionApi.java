/*
 * Vision
 * Sphereon Vision APIs
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.sphereon.sdk.vision.api;

import com.sphereon.sdk.vision.handler.ApiCallback;
import com.sphereon.sdk.vision.handler.ApiClient;
import com.sphereon.sdk.vision.handler.ApiException;
import com.sphereon.sdk.vision.handler.ApiResponse;
import com.sphereon.sdk.vision.handler.Configuration;
import com.sphereon.sdk.vision.handler.Pair;
import com.sphereon.sdk.vision.handler.ProgressRequestBody;
import com.sphereon.sdk.vision.handler.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.sphereon.sdk.vision.model.VisionJob;
import com.sphereon.sdk.vision.model.VisionSettings;
import com.sphereon.sdk.vision.model.ErrorResponse;
import com.sphereon.sdk.vision.model.ClassificationResponse;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VisionApi {
    private ApiClient apiClient;

    public VisionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VisionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createVisionJob */
    private com.squareup.okhttp.Call createVisionJobCall(VisionSettings visionSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = visionSettings;
        
        // verify the required parameter 'visionSettings' is set
        if (visionSettings == null) {
            throw new ApiException("Missing the required parameter 'visionSettings' when calling createVisionJob(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/vision/0.1/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a new vision job
     * Create a new job for the vision operation
     * @param visionSettings visionSettings (required)
     * @return VisionJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VisionJob createVisionJob(VisionSettings visionSettings) throws ApiException {
        ApiResponse<VisionJob> resp = createVisionJobWithHttpInfo(visionSettings);
        return resp.getData();
    }

    /**
     * Create a new vision job
     * Create a new job for the vision operation
     * @param visionSettings visionSettings (required)
     * @return ApiResponse&lt;VisionJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VisionJob> createVisionJobWithHttpInfo(VisionSettings visionSettings) throws ApiException {
        com.squareup.okhttp.Call call = createVisionJobCall(visionSettings, null, null);
        Type localVarReturnType = new TypeToken<VisionJob>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new vision job (asynchronously)
     * Create a new job for the vision operation
     * @param visionSettings visionSettings (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createVisionJobAsync(VisionSettings visionSettings, final ApiCallback<VisionJob> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createVisionJobCall(visionSettings, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VisionJob>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteVisionJob */
    private com.squareup.okhttp.Call deleteVisionJobCall(String jobid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling deleteVisionJob(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/vision/0.1/{jobid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete a vision job manually
     * Delete a vision job manually
     * @param jobid jobid (required)
     * @return VisionJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VisionJob deleteVisionJob(String jobid) throws ApiException {
        ApiResponse<VisionJob> resp = deleteVisionJobWithHttpInfo(jobid);
        return resp.getData();
    }

    /**
     * Delete a vision job manually
     * Delete a vision job manually
     * @param jobid jobid (required)
     * @return ApiResponse&lt;VisionJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VisionJob> deleteVisionJobWithHttpInfo(String jobid) throws ApiException {
        com.squareup.okhttp.Call call = deleteVisionJobCall(jobid, null, null);
        Type localVarReturnType = new TypeToken<VisionJob>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a vision job manually (asynchronously)
     * Delete a vision job manually
     * @param jobid jobid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteVisionJobAsync(String jobid, final ApiCallback<VisionJob> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteVisionJobCall(jobid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VisionJob>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getClassificationResult */
    private com.squareup.okhttp.Call getClassificationResultCall(String jobid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling getClassificationResult(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/vision/0.1/{jobid}/result".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get classification result of a vision job
     * Get classification result of a vision job that completed the classification
     * @param jobid jobid (required)
     * @return ClassificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClassificationResponse getClassificationResult(String jobid) throws ApiException {
        ApiResponse<ClassificationResponse> resp = getClassificationResultWithHttpInfo(jobid);
        return resp.getData();
    }

    /**
     * Get classification result of a vision job
     * Get classification result of a vision job that completed the classification
     * @param jobid jobid (required)
     * @return ApiResponse&lt;ClassificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClassificationResponse> getClassificationResultWithHttpInfo(String jobid) throws ApiException {
        com.squareup.okhttp.Call call = getClassificationResultCall(jobid, null, null);
        Type localVarReturnType = new TypeToken<ClassificationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get classification result of a vision job (asynchronously)
     * Get classification result of a vision job that completed the classification
     * @param jobid jobid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClassificationResultAsync(String jobid, final ApiCallback<ClassificationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClassificationResultCall(jobid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClassificationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getVisionJob */
    private com.squareup.okhttp.Call getVisionJobCall(String jobid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling getVisionJob(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/vision/0.1/{jobid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get a vision job
     * Get a Vision job
     * @param jobid jobid (required)
     * @return VisionJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VisionJob getVisionJob(String jobid) throws ApiException {
        ApiResponse<VisionJob> resp = getVisionJobWithHttpInfo(jobid);
        return resp.getData();
    }

    /**
     * Get a vision job
     * Get a Vision job
     * @param jobid jobid (required)
     * @return ApiResponse&lt;VisionJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VisionJob> getVisionJobWithHttpInfo(String jobid) throws ApiException {
        com.squareup.okhttp.Call call = getVisionJobCall(jobid, null, null);
        Type localVarReturnType = new TypeToken<VisionJob>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a vision job (asynchronously)
     * Get a Vision job
     * @param jobid jobid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVisionJobAsync(String jobid, final ApiCallback<VisionJob> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVisionJobCall(jobid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VisionJob>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for submitVisionJob */
    private com.squareup.okhttp.Call submitVisionJobCall(String jobid, VisionSettings settings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = settings;
        
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling submitVisionJob(Async)");
        }
        
        // verify the required parameter 'settings' is set
        if (settings == null) {
            throw new ApiException("Missing the required parameter 'settings' when calling submitVisionJob(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/vision/0.1/{jobid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Start classification of a vision job
     * Start classification of a vision job
     * @param jobid jobid (required)
     * @param settings settings (required)
     * @return VisionJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VisionJob submitVisionJob(String jobid, VisionSettings settings) throws ApiException {
        ApiResponse<VisionJob> resp = submitVisionJobWithHttpInfo(jobid, settings);
        return resp.getData();
    }

    /**
     * Start classification of a vision job
     * Start classification of a vision job
     * @param jobid jobid (required)
     * @param settings settings (required)
     * @return ApiResponse&lt;VisionJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VisionJob> submitVisionJobWithHttpInfo(String jobid, VisionSettings settings) throws ApiException {
        com.squareup.okhttp.Call call = submitVisionJobCall(jobid, settings, null, null);
        Type localVarReturnType = new TypeToken<VisionJob>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start classification of a vision job (asynchronously)
     * Start classification of a vision job
     * @param jobid jobid (required)
     * @param settings settings (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call submitVisionJobAsync(String jobid, VisionSettings settings, final ApiCallback<VisionJob> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = submitVisionJobCall(jobid, settings, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VisionJob>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for uploadFile */
    private com.squareup.okhttp.Call uploadFileCall(String jobid, File stream, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling uploadFile(Async)");
        }
        
        // verify the required parameter 'stream' is set
        if (stream == null) {
            throw new ApiException("Missing the required parameter 'stream' when calling uploadFile(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/vision/0.1/{jobid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (stream != null)
        localVarFormParams.put("stream", stream);

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Upload an image for a vision job
     * Upload an image for a vision job. Processing will not be started yet.
     * @param jobid jobid (required)
     * @param stream The binary image to upload for a vision job (required)
     * @return VisionJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VisionJob uploadFile(String jobid, File stream) throws ApiException {
        ApiResponse<VisionJob> resp = uploadFileWithHttpInfo(jobid, stream);
        return resp.getData();
    }

    /**
     * Upload an image for a vision job
     * Upload an image for a vision job. Processing will not be started yet.
     * @param jobid jobid (required)
     * @param stream The binary image to upload for a vision job (required)
     * @return ApiResponse&lt;VisionJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VisionJob> uploadFileWithHttpInfo(String jobid, File stream) throws ApiException {
        com.squareup.okhttp.Call call = uploadFileCall(jobid, stream, null, null);
        Type localVarReturnType = new TypeToken<VisionJob>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload an image for a vision job (asynchronously)
     * Upload an image for a vision job. Processing will not be started yet.
     * @param jobid jobid (required)
     * @param stream The binary image to upload for a vision job (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadFileAsync(String jobid, File stream, final ApiCallback<VisionJob> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadFileCall(jobid, stream, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VisionJob>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
