/*
 * Vision
 * Sphereon Vision APIs
 *
 * OpenAPI spec version: 0.2
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.vision.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.vision.model.Credentials;
import com.sphereon.sdk.vision.model.Lifecycle;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * StorageSettings
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-01-09T14:08:09.031+01:00")
public class StorageSettings {
  @SerializedName("container")
  private String container = null;

  @SerializedName("lifecycle")
  private Lifecycle lifecycle = null;

  @SerializedName("credentials")
  private Credentials credentials = null;

  /**
   * The backend type that is used to store files.
   */
  @JsonAdapter(BackendTypeEnum.Adapter.class)
  public enum BackendTypeEnum {
    SPHEREON_CLOUD_STORAGE("SPHEREON_CLOUD_STORAGE"),
    
    AMAZON_S3("AMAZON_S3"),
    
    MS_AZURE_BLOB_STORAGE("MS_AZURE_BLOB_STORAGE"),
    
    GOOGLE_CLOUD_STORAGE("GOOGLE_CLOUD_STORAGE"),
    
    XILLIO_ENGINE("XILLIO_ENGINE");

    private String value;

    BackendTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackendTypeEnum fromValue(String text) {
      for (BackendTypeEnum b : BackendTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BackendTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackendTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackendTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BackendTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("backendType")
  private BackendTypeEnum backendType = null;

  @SerializedName("backend")
  private String backend = null;

  public StorageSettings container(String container) {
    this.container = container;
    return this;
  }

   /**
   * The container id or name in which the files are stored.
   * @return container
  **/
  @ApiModelProperty(value = "The container id or name in which the files are stored.")
  public String getContainer() {
    return container;
  }

  public void setContainer(String container) {
    this.container = container;
  }

  public StorageSettings lifecycle(Lifecycle lifecycle) {
    this.lifecycle = lifecycle;
    return this;
  }

   /**
   * The lifecycle of the stored files.
   * @return lifecycle
  **/
  @ApiModelProperty(value = "The lifecycle of the stored files.")
  public Lifecycle getLifecycle() {
    return lifecycle;
  }

  public void setLifecycle(Lifecycle lifecycle) {
    this.lifecycle = lifecycle;
  }

  public StorageSettings credentials(Credentials credentials) {
    this.credentials = credentials;
    return this;
  }

   /**
   * The credentials from the backed.
   * @return credentials
  **/
  @ApiModelProperty(value = "The credentials from the backed.")
  public Credentials getCredentials() {
    return credentials;
  }

  public void setCredentials(Credentials credentials) {
    this.credentials = credentials;
  }

  public StorageSettings backendType(BackendTypeEnum backendType) {
    this.backendType = backendType;
    return this;
  }

   /**
   * The backend type that is used to store files.
   * @return backendType
  **/
  @ApiModelProperty(value = "The backend type that is used to store files.")
  public BackendTypeEnum getBackendType() {
    return backendType;
  }

  public void setBackendType(BackendTypeEnum backendType) {
    this.backendType = backendType;
  }

  public StorageSettings backend(String backend) {
    this.backend = backend;
    return this;
  }

   /**
   * The backend id or name that is used to store files.
   * @return backend
  **/
  @ApiModelProperty(value = "The backend id or name that is used to store files.")
  public String getBackend() {
    return backend;
  }

  public void setBackend(String backend) {
    this.backend = backend;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageSettings storageSettings = (StorageSettings) o;
    return Objects.equals(this.container, storageSettings.container) &&
        Objects.equals(this.lifecycle, storageSettings.lifecycle) &&
        Objects.equals(this.credentials, storageSettings.credentials) &&
        Objects.equals(this.backendType, storageSettings.backendType) &&
        Objects.equals(this.backend, storageSettings.backend);
  }

  @Override
  public int hashCode() {
    return Objects.hash(container, lifecycle, credentials, backendType, backend);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageSettings {\n");
    
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    lifecycle: ").append(toIndentedString(lifecycle)).append("\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("    backendType: ").append(toIndentedString(backendType)).append("\n");
    sb.append("    backend: ").append(toIndentedString(backend)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

