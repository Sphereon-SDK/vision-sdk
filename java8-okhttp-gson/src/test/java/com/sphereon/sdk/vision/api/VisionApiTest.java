/**
 * Vision
 * Sphereon Vision APIs
 * <p>
 * OpenAPI spec version: 0.2
 * Contact: dev@sphereon.com
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.sphereon.sdk.vision.api;

import com.sphereon.sdk.vision.handler.ApiException;
import com.sphereon.sdk.vision.model.InputResource;
import com.sphereon.sdk.vision.model.VisionJob;
import com.sphereon.sdk.vision.model.VisionSettings;
import org.junit.Before;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import java.io.File;
import java.util.Collections;

import static org.junit.Assert.assertEquals;

/**
 * API tests for VisionApi
 */
//@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class VisionApiTest {

    private static VisionJob job;
    private final VisionApi api = new VisionApi();

    @Before
    public void setup() {
        boolean testlocal = Boolean.getBoolean("test.local");
        if (testlocal) {
            api.getApiClient().setBasePath("http://127.0.0.1:18100");
        }
        api.getApiClient().setAccessToken(System.getenv("SPHEREON_TEST_ACCESSTOKEN"));
    }

    private VisionSettings createJobSettings() {
        VisionSettings visionSettings = new VisionSettings();
        visionSettings.setVendor(VisionSettings.VendorEnum.GOOGLE_VISION);
        visionSettings.setDetectionTypes(Collections.singletonList(VisionSettings.DetectionTypesEnum.TEXT));
        visionSettings.setStorageProvider(VisionSettings.StorageProviderEnum.SUPPLIER);

        return visionSettings;
    }

    /**
     * Create a new vision job
     * <p>
     * Create a new job for the vision operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void _01_createVisionJobTest() throws ApiException {

        job = api.createVisionJob(createJobSettings());
        assertEquals("UPLOAD_RESOURCES", job.getState().getValue());
    }

    /**
     * Get a vision job
     * <p>
     * Get a Vision job. After processing the vision job contains the results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void _02_getVisionJobTest() throws ApiException {
        String jobId = job.getJobId();
        VisionJob response = api.getVisionJob(jobId);
        assertEquals("UPLOAD_RESOURCES", response.getState().getValue());
    }

    /**
     * Upload an image for a vision job
     * <p>
     * Upload an image for a vision job. Processing will start after submitting the job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void _03_uploadFileTest() throws ApiException {
        String jobId = job.getJobId();
        File stream = new File("src\\test\\java\\com\\sphereon\\sdk\\vision\\api\\label-dog.jpg");
        InputResource response = api.uploadFile(jobId, stream);
        assertEquals(stream.getName(), response.getStreamLocation().getOriginalFilename());
    }

    /**
     * Start classification of a vision job
     * <p>
     * Submit a vision job to start classification.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void _04_submitVisionJobTest() throws ApiException {
        String jobId = job.getJobId();
        VisionSettings settings = createJobSettings();
        VisionJob response = api.submitVisionJob(jobId, settings);
        assertEquals("PROCESSING", response.getState().getValue());
    }

    /**
     * Delete a vision job manually
     * <p>
     * Delete a vision job manually. This will delete the uploaded resources if not yet deleted after the job is complete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void _05_deleteVisionJobTest() throws ApiException {
        String jobId = job.getJobId();
        VisionJob response = api.deleteVisionJob(jobId);
        assertEquals("DELETED", response.getState().getValue());
    }
}
